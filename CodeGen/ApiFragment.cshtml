@using CodeGen
@inherits RazorLight.TemplatePage<CodeGen.ApiFragment>

type Client = {
    get: <TParams, TRes>(url: string, params?: TParams) => Promise<TRes>;
    post: <TParams, TRes>(url: string, params?: TParams) => Promise<TRes>;
}


@foreach (var part in Model.Parts)
{
    <text>
        export class @part.Name {
        constructor(private readonly client: Client) {
        
        }
            @foreach (var method in part.Methods)
            {
                var parameterList = method.Parameters
                    .Select(x => $"{x.Name}: " + TypescriptModel.TranslateType(x.Type))
                    .ToList();
                var pList = string.Join(", ", parameterList);

                var returnType = $"Promise<{TypescriptModel.TranslateType(method.ReturnType)}>";
                
                <text>
                    @method.Name = (@pList): @Raw(returnType) => {
                        return this.client.get<@TypescriptModel.TranslateType(method.ReturnType)>("anurl", @method.Parameters.SingleOrDefault()?.Name);
                    }
                </text>
            }
        }
    </text>
}
